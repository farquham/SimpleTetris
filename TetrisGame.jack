//**
//* Implements a simple black and white Tetris game
//* Only one level
//* Never Speeds up (same speed the entire time) (no piece dropping)
//* There will be a play area and score board, part types are pseudo random
//* Use the left and right arrow keys to move the piece, and the up and down arrow keys to rotate the piece
//* Press q to quit the game 

class TetrisGame {
    field TetrisPiece piece; // current block
    field int control, score;
    field Array PA;
    field boolean exists;
 
    // Constructs a new Tetris Game
    constructor TetrisGame new() {
        do TetrisHelper.PAS();
        do TetrisHelper.CS(00000);        
        let piece = TetrisPiece.new(0);
        let exists = true;
        let control = 0;
        let score = 0;
        return this;
    }

    // Disposes this game
    method void dispose() {
        do piece.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void movePiece() {
        if (control = 1) { 
        if (TetrisHelper.legalMove(PA, piece.PP)) {
            do piece.rotCCW(); }}
        if (control = 2) { 
        if (TetrisHelper.legalMove(PA, piece.PP)) {
            do piece.rotCW(); }}
        if (control = 3) { 
        if (TetrisHelper.legalMove(PA, piece.PP)) {
            do piece.moveLeft(); }}
        if (control = 4) { 
        if (TetrisHelper.legalMove(PA, piece.PP)) {
            do piece.moveRight(); }}
        do Sys.wait(5); // delays next movement
        return;
    }

    method void movePieceDown() {
        if (TetrisHelper.legalMove(PA, piece.PP)) {
            do piece.moveDown();
        } else {
            let exists = false; 
        }
        do Sys.wait(5);
        return;
    }

    method void gameScore() {
        var int row; 
        // checks if all black line
        // if yes:
        // increases score
        // delete line
        // move above blocks down 
        // if no: nothing
        let row = TetrisHelper.blackRow(PA);
        if (row > 0) {
            let score = score + 100; 
            do TetrisHelper.scoreReset(PA, row);
        }
        return;
    }

    // Runs the game and handles the user inputs controls
    method void run() {
        var char key;  // key current pressed by user
        var boolean exit;
        var int pt;
        let pt = 1;
        let exit = false;

        while (~exit) {
            // while the piece exists
            while (exists) { 
            // waits for the key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do movePieceDown();
            }
            
            if (key = 81) { let exit = true; }  // q key
             
            if (key = 131) { let control = 1; }  // up arrow
            if (key = 133) { let control = 2; }  // down arrow
            if (key = 130) { let control = 3; }  // left arrow
            if (key = 132) { let control = 4; }  // right arrow
            
            // if a key is pressed then do that action
            if(~(key = 0)) {
                let key = Keyboard.keyPressed();
                do movePiece();
                do movePieceDown();
            }
            }
            do gameScore();
            let piece = TetrisPiece.new(pt);
            let exists = true;
            let pt = pt + 1; 
        }
        return;
    }
}
